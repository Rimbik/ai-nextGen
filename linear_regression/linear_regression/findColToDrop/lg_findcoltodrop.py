# -*- coding: utf-8 -*-
"""LG_findColToDrop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YqczKzqOtM3daI55HhGUHlm37wLtMxtX
"""

# Linear-Regression - Prediction of Sell price of cars
# Ref : ChatGpt 3

import pandas as pd
from io import StringIO
import io
import requests
import json
from io import FileIO
from json import loads, dumps
# import csv
import matplotlib.pyplot as plt

# DataSet : https://github.com/Rimbik/ai-nextGen/blob/main/linear_regression/sample_dataset/realestate_ds.csv
url = "https://raw.githubusercontent.com/Rimbik/ai-nextGen/refs/heads/main/linear_regression/sample_dataset/realestate_ds.csv"
s = requests.get(url).content
df = pd.read_csv(io.StringIO(s.decode('utf-8')))

df

# VIF Technique (Variance Inflation Factor - VIF)
from statsmodels.stats.outliers_influence import variance_inflation_factor
import pandas as pd

def calculate_vif(X):
    vif_data = pd.DataFrame()

    vif_data["feature"] = X.columns
    vif_data["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]

    return vif_data


vif_df = calculate_vif(df)

# drop features with high VIF values
# RULES : to identify high VIF
  # A) VIF > 10: Serious multicollinearity
  # B) VIF > 4 or 5: Moderate to high multicollinearity
  # C) VIF = 1: The predictor is not correlated with other variables

# Find >>
# A : features above 10 are considered to indicate serious multicollinearity
    # Price = This we will predict
    # serious multicollinearity [Year_Built, Square_Feet, Number_Bedroom]
# B : features that are greater than 4 or 5
    # [Garage_Size, Num_Bedrooms, Num_Floors, Num_Bathrooms]
# VIF = 1: The predictor is not correlated with other variables
    # Nil

# ---------------------------------------------------------------------------#
vif_df = vif_df.sort_values(by='VIF', ascending=False)
vif_df

new_df = df.drop(['Year_Built', 'Square_Feet', 'Num_Bedrooms', 'Garage_Size', 'Num_Floors', 'Num_Bathrooms'], axis=1)
new_df

vif_df = calculate_vif(new_df)
vif_df

# Progrmatically identify colums to be dropped
def tag_columns_tobeDropped(df):
    mydf = df.copy()
    vif_df = calculate_vif(mydf)
    vif_df["candrop"] = ""
    vif_df["drop_reason"] = "-"

    vif_df = vif_df.sort_values(by='VIF', ascending=False)

    for index, row in vif_df.iterrows():
          if row["VIF"] > 10:
              vif_df.at[index, "candrop"] = "Y"
              vif_df.at[index, "drop_reason"] = "Serious multicollinearity"

          elif row["VIF"] > 4:
              vif_df.at[index, "candrop"] = "Y"
              vif_df.at[index, "drop_reason"] = "Moderate to high multicollinearity"

          elif row["VIF"] == 1:
              vif_df.at[index, "candrop"] = "Y"
              vif_df.at[index, "drop_reason"] = "Not correlated with other variables"

          else:
              vif_df.at[index, "candrop"] = "N"
              vif_df.at[index, "drop_reason"] = "No need to drop"

    return vif_df


vif_df_indicator = tag_columns_tobeDropped(df)
vif_df_indicator

tuned_df = vif_df_indicator[vif_df_indicator["candrop"] != "Y"]
df_toTrain = df.filter(['Has_Garden','Has_Pool','Price'], axis=1)
df_toTrain

import matplotlib.pyplot as plt
plt.scatter(df_toTrain['Has_Garden'],df['Price'])
# DOES NOT LOOK LIKE A GOOD CORRELATION if considering VIF Rules